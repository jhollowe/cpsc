[{"uri":"https://johnhollowell.com/cpsc/regex/basics/","title":"Regex Basics","tags":[],"description":"","content":"Regular expressions are a specially formatted string that has special rules used to match and extract data from strings.\nNote: different languages can have slight differences in their implementation of regex. Make sure you test final regexes against your actual language.  Characters and Digits Regexes use some characters as special characters which add functionality. If you need to use the character without its special meaning, you can escape it with a backslash \u0026ldquo;\u0026quot;.\n   Character Sequence Special Function Usage Match(es)     . Matches any character except a line break (\\n or \\r) gr.y gray, gr_y, grHy, gr4y   \\w Matches any \u0026ldquo;word\u0026rdquo; character: alphanumerics and underscore \\w\\w\\w 4a_   \\d Matches any digit: 0 through 9 I'm \\d\\d years old I\u0026rsquo;m 04 years old   \\s Matches any whitespace character: space, tab, and newline Hello\\sthere\\sworld Hello there\nworld   \\W Inverse of \\w \\W\\W\\W -.*   \\D Inverse of \\d \\D\\D\\D A%z   \\S Inverse of \\s ab\\Sd ab$d   \\\\ the backslash character \\\\ \\    By default, regexes are also case-sensitive. Therefore, if you want to match \u0026ldquo;Hello\u0026rdquo; and \u0026ldquo;hello\u0026rdquo;, you can use Character Sets to to allow both an uppercase and lowercase letter or set the regular expression to be case insensitive. See your language\u0026rsquo;s method off doing this (case-insensitivity is often the \u0026ldquo;i\u0026rdquo; flag).\nCharacter Sets With regex, you can specify character sets which will match any of the included characters. This allows you to handle some basic variability.\nCharacter sets are denoted by [] surrounding characters. They allow any single character within them to be matched. The best way to explain character sets is through an example.\ngr[ae]y matches both \u0026ldquo;gray\u0026rdquo; and \u0026ldquo;grey\u0026rdquo;.\nCharacter sets support all the special character sequences listed above. Character sets also support character ranges. If you want to match only whole numbers, you could use [1-9] and if you wanted only letters, you could use [a-zA-Z].\n   Character range Matches     a-z a,b,c,d,\u0026hellip;,x,y,z   A-Z A,B,C,D,\u0026hellip;,X,Y,Z   0-9 0,1,2,\u0026hellip;,7,8,9    Inversion/Negation Character sets can be inverted to match everything except what is in the character set. This is done by having \u0026ldquo;^\u0026rdquo; as the first character in inside the brackets. To match a \u0026ldquo;^\u0026rdquo;, it can be escaped (\u0026quot;^\u0026rdquo;).\n   Character set Matches     [abc] a,b,c   [^abc] A,$,.,4,\u0026hellip;   [\\^a] a,^    "},{"uri":"https://johnhollowell.com/cpsc/intro/basic-nav/","title":"Basic Navigation","tags":[],"description":"","content":"There are three main navigation tools on this site.\n The Navbar on the left (click the three bars if on mobile to see) The Table of Contents on the right The Previous and Next page footer  The Navbar The Navbar is the the main way to select a specific topic.\n"},{"uri":"https://johnhollowell.com/cpsc/intro/","title":"Intro","tags":[],"description":"","content":"This page is incomplete and under development\n"},{"uri":"https://johnhollowell.com/cpsc/regex/multiplicity/","title":"Multiplicity","tags":[],"description":"","content":"Character sets are great, but many times you want to be able to specify the characters to match and how many times those characters will appear. This is where multiplicity\nBasic Multiplicity Adding a multiplier character to the end of a character set (or a later-learned capture group) allows matching the same character(s) multiple (consecutive) times.\n   Character Multiplier     \\* 0 or more   + 1 or more   ? 0 or 1    Examples    Regex Match(es)     colo[u]?r color,colour   a[bcd]?e ae,abe,ade,ace   a[h]+ ah,ahhhhhhhh   [s]*h h,sh,ssssh    Multiplicity Ranges You can also specify a specific multiplicity or range of multiplicity for a character set.\n   Multiplicity Number of Occurences     {3} exactly 3   {2,5} 2, 3, 4, or 5   {4,} 4 or more    So he[l]{2,5}o will match \u0026ldquo;hello\u0026rdquo; through \u0026ldquo;helllllo\u0026rdquo;.\n"},{"uri":"https://johnhollowell.com/cpsc/regex/capture-groups/","title":"Capture Groups","tags":[],"description":"","content":"Capture groups are similar to character sets, but they allow matching specific character sequences and can capture part of the input.\nMatching Capture groups allow matching entire character sequences (strings). Rather than [abc] matching either \u0026ldquo;a\u0026rdquo; or \u0026ldquo;b\u0026rdquo; or \u0026ldquo;c\u0026rdquo;, the capture group (abc) matches \u0026ldquo;abc\u0026rdquo;.\nYou can match different strings using | to separate different options. You can use character sets within capture groups to add additional flexibility. Since character ranges don\u0026rsquo;t exist in capture groups, you do not have to escape \u0026ldquo;-\u0026quot;, but it doesn\u0026rsquo;t hurt and can make reading the regex clearer. Capture groups follow all the same multiplicity rules.\nExamples    Capture Group Matches     (color|colour) color,colour   Cat(apult|-nap) Catapult,Cat-nap   (cool[\\s]?)+ cool,cool ,coolcool,cool cool cool   (wee\\|doo)+ weedooweedoo,wee,doo,doodoodoo    Capturing Capture groups can also be used to capture (wow) a sequence of characters. This can be used to extract parts of a string or test if a substring is within a string.\nMost languages allow you to evaluate a regex and then use the capture groups as variables in your code. Since this is done in different ways for each language, this will not be covered here.\nCapture groups can also be used to check for an exact match in different places in the regex. A capture group is used by placing \\1 in the regex, where 1 is the index (starting at 1) of the capture group\nExamples    Capture Group Match(es)     (hello) \\1 hello hello   (ye(haw\\|et)) \\1 yeet yeet,yehaw yehaw   (t)(a)(c)(o)\\3\\2\\1 tacocat   (http[s]?)://(.*)[:](\\d+)/(.*) http://example.com:80/an/example/path    You can also mark groups as non-capturing by adding ?: to the start of the group (e.g. `(?:test)). This prevents regex parsers from waisting time pulling out strings if you do not need to use the value later.\n"},{"uri":"https://johnhollowell.com/cpsc/regex/positions/","title":"Positions","tags":[],"description":"","content":"Regexes can also be positionally limited. This allows you to match an entire string. It also allows matching to the beginning or the end of the sting.\n   Character Position     ^ Start   $ End    Examples    Regex Input Match(es) Non Match(es)     ^test$ test test    ^test$ a test  a test   ^test a test  a test   ^test test 2 test 2   test$ a test test a   test$ test 2  test 2    "},{"uri":"https://johnhollowell.com/cpsc/regex/","title":"Regex","tags":[],"description":"","content":"he[l]{2}o\\sth(e)r\\1!\nIf you can read that, you can probably skip over this section. This section is about Regular Expressions, or Regex.\nWhat is Regex? Regular expressions allow you to specify a template to match against a string. This template can allow multiple strings to match, allowing a variable entry to match a fixed rule. Regex can also be used to extract sections from a variable string.\nRegex can be super powerful, but it can cause problems if given strings that are unexpected or malicious. Attackers can trick a regex into validating incorrect strings or pulling the wrong thing from a string. Regex can also fail to match valid data that is in a format that you are not expecting.\nCreating a regex that works for the things you think of is easy; creating a regex that works safely 100% of the time is a lot harder.\nRegexes can even take down part of the internet.\nResources  https://regexr.com/ is a great tool to check and play around with regex. https://regexcrossword.com/ is a fun way to gradually learn more and more complex regexes https://regexone.com/ is an interactive guide through regular expressions https://www.regular-expressions.info/ is the go-to resource for an in-depth understanding of regex  I\u0026rsquo;ve learned a lot from learning the basics and then learning as I solve more of the regexcrosswords.\n"},{"uri":"https://johnhollowell.com/cpsc/","title":"Welcome!","tags":[],"description":"","content":"This site\u0026rsquo;s goal is to house information and links to information you won\u0026rsquo;t learn about Computer Science (CPSC).\nTo get started, check out Intro for a guide on using this site, or jump straight into a topic. Topics that have prerequisite topics will list any prior reading requirements before you start.\nHave fun!\n"},{"uri":"https://johnhollowell.com/cpsc/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://johnhollowell.com/cpsc/tags/","title":"Tags","tags":[],"description":"","content":""}]