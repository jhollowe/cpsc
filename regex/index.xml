<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Regex on CPSC Learning Lessons</title><link>https://johnhollowell.com/cpsc/regex/</link><description>Recent content in Regex on CPSC Learning Lessons</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 05 May 2020 03:30:27 +0000</lastBuildDate><atom:link href="https://johnhollowell.com/cpsc/regex/index.xml" rel="self" type="application/rss+xml"/><item><title>Regex Basics</title><link>https://johnhollowell.com/cpsc/regex/basics/</link><pubDate>Wed, 06 May 2020 01:44:39 +0000</pubDate><guid>https://johnhollowell.com/cpsc/regex/basics/</guid><description>Regular expressions are a specially formatted string that has special rules used to match and extract data from strings.
Note: different languages can have slight differences in their implementation of regex. Make sure you test final regexes against your actual language. Characters and Digits Regexes use some characters as special characters which add functionality. If you need to use the character without its special meaning, you can escape it with a backslash &amp;ldquo;\&amp;rdquo;.</description></item><item><title>Multiplicity</title><link>https://johnhollowell.com/cpsc/regex/multiplicity/</link><pubDate>Wed, 06 May 2020 23:07:55 +0000</pubDate><guid>https://johnhollowell.com/cpsc/regex/multiplicity/</guid><description>Character sets are great, but many times you want to be able to specify the characters to match and how many times those characters will appear. This is where multiplicity
Basic Multiplicity Adding a multiplier character to the end of a character set (or a later-learned capture group) allows matching the same character(s) multiple (consecutive) times.
Character Multiplier \* 0 or more + 1 or more ?</description></item><item><title>Capture Groups</title><link>https://johnhollowell.com/cpsc/regex/capture-groups/</link><pubDate>Thu, 07 May 2020 04:28:29 +0000</pubDate><guid>https://johnhollowell.com/cpsc/regex/capture-groups/</guid><description>Capture groups are similar to character sets, but they allow matching specific character sequences and can capture part of the input.
Matching Capture groups allow matching entire character sequences (strings). Rather than [abc] matching either &amp;ldquo;a&amp;rdquo; or &amp;ldquo;b&amp;rdquo; or &amp;ldquo;c&amp;rdquo;, the capture group (abc) matches &amp;ldquo;abc&amp;rdquo;.
You can match different strings using | to separate different options. You can use character sets within capture groups to add additional flexibility. Since character ranges don&amp;rsquo;t exist in capture groups, you do not have to escape &amp;ldquo;-&amp;rdquo;, but it doesn&amp;rsquo;t hurt and can make reading the regex clearer.</description></item><item><title>Positions</title><link>https://johnhollowell.com/cpsc/regex/positions/</link><pubDate>Thu, 07 May 2020 22:39:38 -0400</pubDate><guid>https://johnhollowell.com/cpsc/regex/positions/</guid><description>Regexes can also be positionally limited. This allows you to match an entire string. It also allows matching to the beginning or the end of the sting.
Character Position ^ Start $ End Examples Regex Input Match(es) Non Match(es) ^test$ test test ^test$ a test a test ^test a test a test ^test test 2 test 2 test$ a test test a test$ test 2 test 2</description></item></channel></rss>